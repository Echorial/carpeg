class Carpeg.expressions.native inherits Carpeg.expression {
	bound public string code = "";
	bound public string initializer = "";

	fixed public <Carpeg.expressions.any>function @construct(map data) {
		this.baked = data;
	}
	
	bound public override <string>function display() {
		return "Native";
	}

	bound public override <string>function generate() {
		var string elser = "else if";
		if (this.context.checkerIndex == 0) {
			elser = "if";
		}
		if (this.parentRule.checkerIndex == 0) {
			this.context.next = 2;
		}

		var string code = this.code;
		var string cast = "castnac" + this.parentLabel + this.context.checkerIndex;
		
		var <string>array ref = this.code.match("[\\$]([A-Za-z_0-9]*)");
		var map casters = new map();
		if (ref != null)
			for (var int i in ref) {
				var string iRef = ref[i];
				var string removed = iRef.substr(1, iRef.length() - 1);
				var map cLab = this.context.childLabels;
				if (removed in cLab) {
					var Carpeg.expressions.labeled labelRef = cLab[removed];
					var string oType = labelRef.outputType;
					
					casters[removed] = "var " + oType + " actionCap" + this.context.checkerIndex + removed + " = " + this.parentRule.expression.capturePlace() + "[\"" + removed + "\"];";
				}else{
					Exception.throw("No variable " + removed + " found.");
				}
			}
		
		var string casterCode = "";
		
		for (var string rem in casters) {
			casterCode += casters[rem];
		}

		code = code.regularReplace("[\\$]([A-Za-z_0-9]*)", "actionCap" + this.context.checkerIndex + "$1");
		code = code.regularReplace("[\\@](move)\\(\\)", this.callMove());
		code = code.regularReplace("[\\@](capture)\\(\\s*([^)]*)\\s*\\)", this.captureData("$2"));
		code = code.regularReplace("[\\@](error)\\(\\s*([0-9]*)\\s*,\\s*([^,]*)\\s*,\\s*([^)]*)\\s*\\)", this.callError("$2", "\" + $3 + \"", "$4"));

		var <string>array out = new <string>array();
		
		out = [
			elser, " (c == ", this.context.checkerIndex, ") {\n",
			"	var ", this.outputType, " ", cast, " = ", this.captureRoot(), "[\"", this.parentLabel, "\"];\n",
			"	", casterCode, "\n",
			"	", code,
			"\n}"
		];
		
		return out.join("");
	}
	
	bound public override <void>function build() {
		var map data = this.baked;

		this.outputType = data["outputType"];
		this.code = data["code"];
		this.initializer = data["initializer"];

		if (this.isLabeled and this.directLabel) {
			this.doOwnCapture = true;
		}

		this.parentRule.initializers.push(this.initializer);
	}
}